#
from array import array
import sys
import random
import typing

"""
在创造 Python 以前，Guido 曾为 ABC 语言贡献过代码。ABC 语言是一
个致力于为初学者设计编程环境的长达 10 年的研究项目，其中很多点
子在现在看来都很有 Python 风格：序列的泛型操作、内置的元组和映射
类型、用缩进来架构的源码、无需变量声明的强类型，等等。Python 对
开发者如此友好，根源就在这里。
Python 也从 ABC 那里继承了用统一的风格去处理序列数据这一特点。
不管是哪种数据结构，字符串、列表、字节序列、数组、XML元素，
抑或是数据库查询结果，它们都共用一套丰富的操作：迭代、切片、排
序，还有拼接。
深入理解 Python 中的不同序列类型，不但能让我们避免重新发明轮子，
它们的 API 还能帮助我们把自己定义的 API 设计得跟原生的序列一样，
或者是跟未来可能出现的序列类型保持兼容。
本章讨论的内容几乎可以应用到所有的序列类型上，从我们熟悉的
list，到 Python 3 中特有的 str 和 bytes。我还会特别提到跟列表、
元组、数组以及队列有关的话题。但是 Unicode 字符串和字节序列这方
面的内容被放在了第 4 章。另外这里讨论的数据结构都是 Python 中现成
可用的，如果你想知道怎样创建自己的序列类型，那得等到第 10 章。


"""
# array.array()
class Array:
    size: int
    type_code: str
    @typing.overload   #python3.5以后引入了typing,其内部封装了函数重载方法overload
    def func(self) -> None: ...
    @typing.overload
    def func(self, x: int) -> None:
        print(x)
    def func(self):
        return 0

#-------------------------------------------------------------------------------------------
#用bisect来管理已经排序的序列
# bisect模块包含两个主要函数，bisect和insort，两个函数都利用二分查找算法来在有序序列中查找或插入元素

#-------------------------------------------------------------------------------------------
#当列表不是首选时---------》数组，包含的模块array
"""
虽然列表既灵活又简单，但面对各类需求，我们可能需要选择其他的容器。
比如，我们要存1000万个浮点数，数组(array)可能是效率更高的选择，
因为数组并不是寸的float对象，而是机器翻译，也就是字节码描述的，就像
C语言中的数组一样。再比如说，如果需要频繁的对序列做出先进先出的操作，deque
双端队列的速度更快
"""
"""
数组的特性：
1、包含跟所有可变序列有关的操作，包括.pop、.insert、.extend等等
2、数组提供从文件读取和存入文件更快的方法，.frombytes，.tofile
3、数组的创建需要类型码，明确传入的数据类型，并且要保持所有数据的类型一致，'b'表示有符号的字符，array('b')创建一个字节大小的整数
"""
#创建一个含有一千万个浮点数的数组
flaots_arr = array('d', (random.random() for i in range(10**7)))
#访问操作
print(flaots_arr[-1])   #可以明显感觉到程序的执行速度变慢了
#将floats_arr存入文件中,然后在读出来
with open('float_nums.bin', 'wb') as f:
    flaots_arr.tofile(f)
with open('float_nums.bin', 'rb') as f:
    read_arr = array('d')
    read_arr.fromfile(f, 10**7)
print(read_arr[-1])
'''
从上面的代码我们能得出结论，array.tofile 和 array.fromfile 用
起来很简单。把这段代码跑一跑，你还会发现它的速度也很快。一个小
试验告诉我，用 array.fromfile 从一个二进制文件里读出 1000 万个
双精度浮点数只需要 0.1 秒，这比从文本文件里读取的速度要快 60
倍，因为后者会使用内置的 float 方法把每一行文字转换成浮点数。
--------------------------------------------------------
另外一个快速序列化数字类型的方法是使用
pickle（https://docs.python.org/3/library/pickle.html）模
块。pickle.dump 处理浮点数组的速度几乎跟 array.tofile 一
样快。不过前者可以处理几乎所有的内置数字类型，包含复数、嵌
套集合，甚至用户自定义的类。前提是这些类没有什么特别复杂的
实现。
'''

#-------------------------------------------------------------------------------------------
#内存视图
"""
memoryview 是一个内置类，它能让用户在不复制内容的情况下操作同
一个数组的不同切片。
内存视图其实是泛化和去数学化的 NumPy 数组。它让你在不需要
复制内容的前提下，在数据结构之间共享内存。其中数据结构可以
是任何形式，比如 PIL图片、SQLite 数据库和 NumPy 的数组，等
等。这个功能在处理大型数据集合的时候非常重要。
------------------------------------------------------
memoryview.cast 的概念跟数组模块类似，能用不同的方式读写同一
块内存数据，而且内容字节不会随意移动。这听上去又跟 C 语言中类型
转换的概念差不多。memoryview.cast 会把同一块内存里的内容打包
成一个全新的 memoryview 对象给你。
"""

#-------------------------------------------------------------------------------------------
# Numpy 和 SciPy 高阶数组和矩阵的操作模块
"""
Numpy实现了多维同质数组和矩阵，这些数据结构不但能处理数字，还能存放其他用户自定义的数据
用户能够对这些数据结构里的数据进行高效的操作
Scipy是基于Numpy的另一个库，它提供了很多跟科学计算有关的算法，专为线性代数、数值积分和统计学
而设计的
"""