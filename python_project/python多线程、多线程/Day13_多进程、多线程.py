import threading
#操作系统进程、线程概述
"""
1、前言
今天我们使用的计算机早已进入多CPU或多核时代，而我们使用的操作系统都是支持“多任务”的操作系统，这使得我们可以同
时运行多个程序，也可以将一个程序分解为若干个相对独立的子任务，让多个子任务并发的执行，从而缩短程序的执行时间，
同时也让用户获得更好的体验。因此在当下不管是用什么编程语言进行开发，实现让程序同时执行多个任务也就是常说的“并发
编程”，应该是程序员必备技能之一。为此，我们需要先讨论两个概念，一个叫进程，一个叫线程。
2、概念
2.1、进程
进程就是操作系统中执行的一个程序，操作系统以进程为单位分配存储空间，每个进程都有自己的地址空间、数据栈以及其他
用于跟踪进程执行的辅助数据，操作系统管理所有进程的执行，为它们合理的分配资源。进程可以通过fork或spawn的方式来
创建新的进程来执行其他的任务，不过新的进程也有自己独立的内存空间，因此必须通过进程间通信机制（IPC，Inter-Process Communication）
来实现数据共享，具体的方式包括管道、信号、套接字、共享内存区等。
2.2、线程
一个进程还可以拥有多个并发的执行线索，简单的说就是拥有多个可以获得CPU调度的执行单元，这就是所谓的线程。由于线程
在同一个进程下，它们可以共享相同的上下文，因此相对于进程而言，线程间的信息共享和通信更加容易。当然在单核CPU系统
中，真正的并发是不可能的，因为在某个时刻能够获得CPU的只有唯一的一个线程，多个线程共享了CPU的执行时间。使用多线程
实现并发编程为程序带来的好处是不言而喻的，最主要的体现在提升程序的性能和改善用户体验，今天我们使用的软件几乎都用
到了多线程技术，这一点可以利用系统自带的进程监控工具（如macOS中的“活动监视器”、Windows中的“任务管理器”）来证
实
"""

#-----------------------------------------------------------------------------------------------
"""
关于进程和线程的进一步深入：深入理解计算机系统
从给处理器加电开始，知道断电为止，程序计数器假设一个值的序列: a1, a2, a3, a4... 其中，每个ak是某个相应指令的Ik的地址。每次从ak到ak+1的过渡
成为控制转移。这样的控制转移序列叫做处理器的控制流。
现代操作系统通过是控制流发生突变来对这些情况（定时器产生信号，异常中断，IO时间，socket连接到来，杀死进程...）做出反应，一般而言，我们称这些情况为
异常控制流。异常控制流发生在操作系统的各个层次，在硬件层，硬件检测到的事件会出发控制转移到异常处理程序。在操作系统层，内核通过上下文切换将控制从一
个进程转换到另一个进程。在应用层，一个进程可以发送信号到另一个进程，而接收者会将控制突然转移到它的一个信号处理程序，回避通常的栈规则，并执行到其他函数中的
任意位置的非本地跳转来对错误做出反应
进程：进程的经典定义就是一个执行中的程序的实例。系统中的每个程序都运行在某个进程的上下文中，进程是操作系统分配资源的最小单位。
上下文：上下文是由程序正确运行所需的状态组成的。这个状态包括存放在内存中的代码和数据块，他的栈、通用目的寄存器的内容、程序计数器、环境变量以及打开的文件
    描述符的集合。
    在Linux中，每次用户向shell中输入一个可执行文件的名字，运行程序时，shell就会创建一个新的进程，然后在这个新的进程的上下文中运行这个可执行的目标文件。应用程序也能
    创建进程，并且在这个新进程的上下文中运行自己的代码或其他应用程序
进程给应用程序提供的关键抽象：
    1、一个独立的地址空间，它提供一个假象，好像我们的程序独占的使用处理器
    2、一个私有的地址空间，它提供一个假象，好像我们的程序独占的使用内存系统
逻辑流：即使在系统中有许多的程序在运行，进程也能给应用程序提供一个假象，好像他们独占的使用处理器和内存。如果用调试器单步调试应用程序，会看到一系列的程序计数器的值，这些值
       唯一的对应于包含在程序中的可执行目标文件中的指令，这个值的序列叫做逻辑控制流（逻辑流）
并发流：异常处理程序、进程、信号处理程序、线程和Java进程都是逻辑流的例子，一个逻辑流在在执行时间上与另外一个流重叠，成为并发流，或两个流并发的执行
并发：多个流并发地执行的一般现象称为并发
多任务：一个进程和其他进程交替执行的概念称为多任务
时间片：一个进程执行它的控制流的一部分的每一个时间段成为时间片
时间分片：多任务也叫时间分片
并行流：是并发流的真子集，在某个时间点，如果两个流并发的运行在不同处理器上，我们称之为并行流
并行：多个流在同一时间点同时运行在不同处理器上的一般现象称之为并行
线程：程序执行的最小单位，是逻辑流的真子集，一个进程不止有单一的控制流，现代操作系统中，一个进程可以由多个成为线程的执行单元组成的，每个线程都运行在进程的上下文中，并共享同样的代码和全局数据
主线程：所有线程的祖先，是进程创建线程后的状态
其他线程：除主线程外的线程
子进程：在Linux中，一个进程通过fork()函数创建一个子进程，子进程的是父进程的完全拷贝，但和父进程也不完全相同，比如fork函数的返回值，fork调用一次，返回两次，在父进程中返回子进程的pid，子进程
       中返回0，调用getpid()获取自身的进程ID，调用getppid()获取父进程的进程编号，signal()函数可以发送信号
兄弟进程：拥有同一父进程的进程彼此
进程组：拥有相同祖先/父进程的进程的集合成为一个进程组
进程组组长：祖宗进程/父进程是进程组的组长 
虚拟内存：
非本地跳转：进程出现异常时，中断跳转到处理程序中执行
用户模式和内核模式：
上下文切换：
调度：
调度器：
僵尸进程：子进程已经执行完任务并死去，父进程没有回收子进程
孤儿进程：父进程死去，子进程存活，在Linux中，子进程会被init进程领养，init进程是所有进程的祖先进程
信号：
内存分页：
"""

class Person:
    _val = 1
    val = 1
    def __init__(self):
        self.__name = 'wuyupeng'
        self._age = 21

class Son(Person):
    def printer(self):
        print(super()._val)
        print(self._age)